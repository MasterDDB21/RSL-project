{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fnil\fcharset0 HelveticaNeue-Bold;}
{\colortbl;\red255\green255\blue255;\red42\green49\blue64;\red245\green245\blue246;\red156\green155\blue176;
}
{\*\expandedcolortbl;;\cssrgb\c21569\c25490\c31765;\cssrgb\c96863\c96863\c97255;\cssrgb\c67451\c67451\c74510;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Introduction\

\f1\b0  \
\
The goal of this assignment was to create a recommendation system for a movie which is chosen by the student self. In my case the movie was Despicable Me. Because of my visual barriers this assignment was for me a bit different than for the other students. Since it is not possible to work on a RPI while using a screenreader. We had to search for another solution to execute this project. Eventually there is decided to do this exercise on my own laptop, so without RPI. This resulted in some difficulties we did not for see in the beginning, which lead to a delay. Despite this way of working was very time consuming. It brought me  a lot of basic knowledge about coding. As a result it is now possible for me to create codes in SQL and Python with the feeling that I am fully in control.     \
\

\f0\b SQL
\f1\b0 \
The first part of the assignment had its focus on SQL, so that\'92s why this reflection form also starts with the SQL part. The SQL part was for me also the toughest, because I still had to learn how to work in a shell and what editor is accessible for me as I am working with a screenreader. This lead to some silly mistakes. For example some. Editors have a build in function that automatically puts in the right punctuation marks or change it to. A better fitting  version,  like the apostrof. It changes to a diagonal instead of a straight one which makes it impossible to use in a SQL command. Of course this is only one example, but all this kind of littles obstacles made it a long run. \
\pard\pardeftab720\sa400\partightenfactor0

\f2\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
Learning to work with SQL and a screen reader was a challenging yet rewarding experience. As a visually impaired learner, I initially found it difficult to navigate through the complex syntax of SQL while relying solely on audio feedback. However, with practice and the help of accessibility features, I gradually became proficient in using SQL with a screen reader.\cb1 \
\cb3 One of the biggest challenges I faced was understanding the relationships between different tables in a database. I had to rely on my screen reader to read out the table names and the column headers, which required a lot of concentration and patience. But as I got more familiar with the syntax and structure of SQL, I found that I was able to visualize the database more easily in my mind.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 This course has allowed me to access a valuable tool for data analysis and has demonstrated that with the right tools and support, it is possible to achieve my goals.\
With the right tools I also mean the right way to use them. Working from the shell had as advantage that the code can be written totally from the editor, but a disadvantage is that not everything was accessible for my screenreader. Therefor I used the following commands:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \\x change table format \
\\I to run a sql command out a file
\f2\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\

\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \\o to get your output in a separate file 
\f2\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\qc\partightenfactor0
\cf4 In line 418 to 421 in the booklet is asked to compare the output files with each other and to write my findings in the reflection document. In the first output file the movie \'91Despicable Me\'92 was compared with other movies based on the summary. The second output file is the output of the comparison based on the starring. One appealing finding is that the comparison on the starring has resulted in more similar movies. The movie \'91Despicable Me\'92 is a movie, with its focus on children, about someone who wants to steal the moon, but in the movie he changes to a careful father. The output file with the movies compared on the summary field were more action movies for adults. So the recommendation system did not distinguish in the audience of the movie. The output file based on the starring was more accurate. This is probably caused by the. Fact that some actors play similar rolls as they did earlier., because that feels more familiar.    \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0   \
\
\
So this is how I experienced. The SQL part. Next is the reflection on Python.\
\

\f0\b python\
\pard\pardeftab720\sa400\partightenfactor0

\f2\b0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
Working with a screen reader in the shell was easier because of my SQL experience. \cb1 \
\cb3  It was hard because I had to do more by myself compared to the SQL part. Unlike working with a graphical user interface, building a collaborative filtering model in Python requires more coding and troubleshooting. This can be daunting for someone who is not experienced in programming or machine learning. Nonetheless, with the right guidance and resources, it surely wasa rewarding learning experience.\cb1 \
\cb3 Eventually, it was fun to try things out.  Being able to build a model that can make personalized recommendations based on a user's past behavior is a fascinating concept. It's satisfying to see the model produce accurate results and learn from its mistakes.\cb1 \
\
Just like in the SQL part I had to use some commands to make the shell more accessible for myself. From the shell the code was ran in a digital environment. By using this way of coding. It is necessary to start with \'91 Python\'92, so the shell knows that the following file is a Python code. What follows is the Python code, in this case: \'91cf-final.py\'92. If this file is executed the output or error is shown in the shell, but that is not totally. Accessible for me. Other side tracks to avoid those issues were:\
> filename to send the output to a separate file \
2> file name to send the error to a separate file so I could read it easily.\
\
The project started not very clear, but while doing I found out a lot. That is why the code is adjusted as it is now. It ended up being more an interface, because a user of this code could fill. In his or her personal movie to see what the recommendations will be. While creating the Y list there is chosen to. Only let movies with a metascore of 7 of higher in. This is done to make sure that the author has a similar taste as the user of the interface. In de Z list is chosen for the same condition as in the Y list, with as goal that only the nice movies will be recommended. With the use of the \'91lambda function the list is sorted in a descending order. \

\f3\b \
Conclusion\

\f2\b0 So in short it has been a very good learning experience. It took a lot of time, but it resulted in a good fundament for my coding career. It gave me a bases to build on for if I have to code in the future. I am not scared to go in Python or SQL anymore. So a huge thanks to my teacher Rob Loke and up to the next.}